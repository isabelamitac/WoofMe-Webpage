{
	"info": {
		"_postman_id": "8c99594d-0e8a-480a-ba5f-d6a55a2f3326",
		"name": "server",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "29531697",
		"_collection_link": "https://winter-resonance-683859.postman.co/workspace/Group-7~b88589b5-4dc3-4261-88e9-c58ec2c80c7c/collection/29890550-8c99594d-0e8a-480a-ba5f-d6a55a2f3326?action=share&source=collection_link&creator=29531697"
	},
	"item": [
		{
			"name": "Create an Owner",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response time is within acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");",
							"});",
							"",
							"// Test to check if the response contains a Content-Type header",
							"pm.test(\"Valid Content-Type header is present\", function() {",
							"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Janne\",\n    \"location\": \"Halmstad\",\n    \"email\": \"janne@outlook.com\",\n    \"password\": \"abc123\",\n    \"dog\": \"\",\n    \"playdate\": [\"\"]\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/owners",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"owners"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a dog",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);",
							"});",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"pm.test(\"Response status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"",
							"pm.test(\"ownerId is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.ownerId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Age is a positive integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.age).to.exist.and.to.be.a('number');",
							"    pm.expect(responseData.age).to.be.above(0);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Breed is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.breed).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ownerId\": \"651c49d3b14da1a55c7e93d1\",\n    \"age\": 2,\n    \"name\": \"Jaba\",\n    \"breed\": \"Schipperke\",\n    \"diet\": \"puppy food\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/owners/651188261cb644ad98f5138a/dogs/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"owners",
						"651188261cb644ad98f5138a",
						"dogs",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Owners",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response is an array with at least 0 elements\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(0);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/owners",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"owners"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Owner by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check if the response time is within an acceptable range",
							"pm.test(\"Response time is within acceptable range\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/owners/65255d21472c7c74987734ce",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"owners",
						"65255d21472c7c74987734ce"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all dogs by owner ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is within acceptable range\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/owners/650afc11bafba5e86d9e1197/dogs",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"owners",
						"650afc11bafba5e86d9e1197",
						"dogs"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Owner by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"location\": \"Malm√∂\",\r\n    \"name\": \"Maria N Oskarsson\",\r\n    \"email\": \"mariaoskarsson@yahoo.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/owners/650c3999b0021e6026f689b5",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"owners",
						"650c3999b0021e6026f689b5"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Owner by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"pm.test(\"Response time is within acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/owners/6511edf60800d0f87eb65d8b",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"owners",
						"6511edf60800d0f87eb65d8b"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete all dogs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"  pm.test(\"Response message is 'All dogs have been deleted'\", function () {",
							"    const responseData = pm.response.text();",
							"    ",
							"    pm.expect(responseData).to.equal('All dogs have been deleted');",
							"  });",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/owners/651003201f7a3b7c5eb70ae8/dogs",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"owners",
						"651003201f7a3b7c5eb70ae8",
						"dogs"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dog by dog's ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/dogs/650ca221c8d7bc29a89ac6b3",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"dogs",
						"650ca221c8d7bc29a89ac6b3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all dogs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"ownerId is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('array');",
							"  ",
							"  responseData.forEach(function(dog) {",
							"    pm.expect(dog.ownerId).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Age is a positive integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('array');",
							"    ",
							"    responseData.forEach(function(dog) {",
							"        pm.expect(dog.age).to.be.a('number');",
							"        pm.expect(dog.age).to.be.above(0);",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/dogs/",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"dogs",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a dog",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ownerId\": \"650afc11bafba5e86d9e1197\",\n    \"age\": 10,\n    \"name\": \"Maisa\",\n    \"breed\": \"Mixed\",\n    \"diet\": \"plant based food\",\n    \"profilePhotoURL\": \"../client/src/assets/maisa.png\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/dogs/651c4964b14da1a55c7e93cc",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"dogs",
						"651c4964b14da1a55c7e93cc"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update dog age",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is within acceptable range\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"age\": 2\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/dogs/650ca221c8d7bc29a89ac6b3/age",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"dogs",
						"650ca221c8d7bc29a89ac6b3",
						"age"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update dog diet",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is within acceptable range\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"diet\": \"no wheats\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/dogs/650ca221c8d7bc29a89ac6b3/diet",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"dogs",
						"650ca221c8d7bc29a89ac6b3",
						"diet"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete dog by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is a string\", function () {",
							"    pm.expect(pm.response.text()).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/dogs/651d6d10760d81ed55c2de85",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"dogs",
						"651d6d10760d81ed55c2de85"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a Dogsitter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Location is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.location).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Julia\",\r\n    \"password\": \"kfandlkfl\",\r\n    \"location\": \"Halmstad\",\r\n    \"dateAvailable\": \"20 october 2023\",\r\n    \"timeAvailable\": \"13:00-15:00\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/dogsitters",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"dogsitters"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Dogsitters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array with at least one element\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"});",
							"",
							"pm.test(\"Response time is within acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/dogsitters",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"dogsitters"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get dogsitter by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has the expected message field\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response time is within acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/dogsitters/651d5a54dd6d70b45fd2a1c1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"dogsitters",
						"651d5a54dd6d70b45fd2a1c1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Dogsitter's time available",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response has the expected message field\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"pm.test(\"Response time is within acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");",
							"});",
							"// Test for response content type",
							"pm.test(\"Response content type is JSON\", function() {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Response status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"timeAvailable\": \"10:00-23:00\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/dogsitters/651d5a54dd6d70b45fd2a1c1/time",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"dogsitters",
						"651d5a54dd6d70b45fd2a1c1",
						"time"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete all Dogsitters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							"",
							"pm.test(\"Dogsitters have been successfully deleted from the database\", function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.have.body(\"All dogsitters have been deleted\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/dogsitters",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"dogsitters"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create a Playdate (Owner)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response in JSON format.\", function() {",
							"    pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Successful posting.\", function() {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Response time.\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"location\": \"Gothenburg\",\n    \"date\": \"2023-11-15\",\n    \"time\": \"10:00-12:00\",\n    \"creatorId\": \"651c49fdb14da1a55c7e93d5\",\n    \"otherOwners\": [\"650afc11bafba5e86d9e1197\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/owners/6511e69d4a8b9a3f4fd5314c/playdates",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"owners",
						"6511e69d4a8b9a3f4fd5314c",
						"playdates"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get a Playdate (Owner)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is within acceptable range\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/owners/6511e69d4a8b9a3f4fd5314c/playdates/6511ecf9c50bc74c2c4b7379",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"owners",
						"6511e69d4a8b9a3f4fd5314c",
						"playdates",
						"6511ecf9c50bc74c2c4b7379"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all playdates",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response is an array\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('array');",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/playdates",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"playdates"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete all Playdates",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time.\", function() {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"})",
							"",
							"pm.test(\"Proper message displayed\", function() {",
							"    pm.expect(pm.response.text(\"All playdates have been deleted\"));",
							"    ",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/playdates",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"playdates"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Playdate (Owner)",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response has the expected message field\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:3001/api/owners/6511e69d4a8b9a3f4fd5314c/playdates/6511e6bc4a8b9a3f4fd53150",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"owners",
						"6511e69d4a8b9a3f4fd5314c",
						"playdates",
						"6511e6bc4a8b9a3f4fd53150"
					]
				}
			},
			"response": []
		},
		{
			"name": "Owner Registration",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"arturm@yahoo.com\",\n    \"password\": \"cielaczek\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/owners/register",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"owners",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Owner Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"mike@yahoo.com\",\n    \"password\": \"123abc\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/owners/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"owners",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create an admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");\r",
							"});\r",
							"\r",
							"// Test to check if the response contains a Content-Type header\r",
							"pm.test(\"Valid Content-Type header is present\", function() {\r",
							"    pm.expect(pm.response.headers.has('Content-Type')).to.be.true;\r",
							"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Sophia\",\r\n    \"email\": \"sophia@yahoo.com\",\r\n    \"password\": \"abc123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/admins",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"admins"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Admin by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check if the response time is within an acceptable range\r",
							"pm.test(\"Response time is within acceptable range\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");\r",
							"});\r",
							"\r",
							"// Test to check if the response body is an object\r",
							"pm.test(\"Response body is an object\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('object');\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/admins/652e7d27feb811429dec5a7f",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"admins",
						"652e7d27feb811429dec5a7f"
					]
				}
			},
			"response": []
		},
		{
			"name": "Admin Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Test to check if the response time is within an acceptable range",
							"pm.test(\"Response time is within acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000, \"Response time should be less than 1000ms\");",
							"});",
							"",
							"// Test to check if the response body is an object",
							"pm.test(\"Response body is an object\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"milenam@yahoo.com\",\n    \"password\": \"abc123\"\n}\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:3001/api/admins/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "3001",
					"path": [
						"api",
						"admins",
						"login"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://localhost:3000",
			"type": "string"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "location",
			"value": ""
		},
		{
			"key": "date",
			"value": ""
		},
		{
			"key": "time",
			"value": ""
		}
	]
}